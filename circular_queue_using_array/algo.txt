Algorithm for Implementing Circular Queue using an Array:

1.  **Define Queue Structure:**
    *   A circular queue uses a fixed-size array.
    *   Maintain two pointers/indices: `front` and `rear`.
    *   `front` points to the first element.
    *   `rear` points to the last element.
    *   Define a `MAX_SIZE` for the array.

2.  **Initialize Queue:**
    *   Set `front = -1`.
    *   Set `rear = -1`.

3.  **Enqueue Operation (Adding an element):**
    *   **Check for Overflow:** If `(rear + 1) % MAX_SIZE == front`, the queue is full. Print an "Overflow" message and return.
    *   **Handle First Element:** If `front == -1` (meaning the queue was empty), set `front = 0`.
    *   **Increment `rear`:** `rear = (rear + 1) % MAX_SIZE`.
    *   **Add Element:** Place the new element at `array[rear]`.

4.  **Dequeue Operation (Removing an element):**
    *   **Check for Underflow:** If `front == -1` (or `front == rear` and `front` is not -1, depending on implementation), the queue is empty. Print an "Underflow" message and return a special value (e.g., -1).
    *   **Retrieve Element:** Get the element at `array[front]`.
    *   **Handle Last Element Removal:** If `front == rear` (meaning only one element was in the queue), reset `front = -1` and `rear = -1` to indicate an empty queue.
    *   **Increment `front`:** Otherwise, `front = (front + 1) % MAX_SIZE`.
    *   **Return Element:** Return the retrieved element.

5.  **Peek/Front Operation (Viewing the front element):**
    *   **Check for Empty:** If `front == -1`, the queue is empty. Print an "Empty" message and return a special value.
    *   **Return Element:** Return the element at `array[front]`.

6.  **isEmpty Operation:**
    *   Return `true` if `front == -1`, `false` otherwise.

7.  **isFull Operation:**
    *   Return `true` if `(rear + 1) % MAX_SIZE == front`, `false` otherwise.

8.  **Display Queue (Optional):**
    *   If `front == -1`, print "Queue is empty."
    *   Otherwise, iterate from `front` up to `rear` (handling wrap-around) and print each element.